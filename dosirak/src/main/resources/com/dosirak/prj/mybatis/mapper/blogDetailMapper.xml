<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dosirak.prj.mapper.BlogDetailMapper">
<resultMap type="BlogDetailDto" id="BlogDetailMap">
   <id     property="blogListNo"     column="BLOG_LIST_NO"/>
   <result property="keywordNo"      column="KEYWORD_NO"/>
   <result property="keywordName"      column="KEYWORD_NAME"/>
   <result property="title"      column="TITLE"/>
   <result property="contents"   column="CONTENTS"/>
   <result property="createDt"   column="CREATE_DT"/>
   <result property="modifyDt"   column="MODIFY_DT"/>
   <result property="commentCount"   column="COMMENT_COUNT"/>
   <result property="hasThumbnail"   column="HAS_THUMBNAIL"/>
   <association property="user"  javaType="UserDto">
     <id     property="userNo"  column="USER_NO"/>
     <result property="nickname"   column="NICKNAME"/>
     <result property="blogImgPath"      column="BLOG_IMG_PATH"/>
     <result property="blogContents"   column="BLOG_CONTENTS"/>
   </association>
 </resultMap>
 
<resultMap type="BlogCommentDto" id="BlogCommentMap">
    <id     property="commentNo" column="COMMENT_NO" />
    <result property="contents"  column="CONTENTS" />
    <result property="createDt"  column="CREATE_DT" />
    <result property="state"     column="STATE" />
    <result property="depth"     column="DEPTH" />
    <result property="groupNo"   column="GROUP_NO" />
    <result property="blogListNo"    column="BLOG_LIST_NO" />
    <association property="user" javaType="UserDto">
      <id     property="userNo" column="USER_NO" />
      <result property="nickname"   column="NICKNAME"/>
      <result property="blogImgPath"  column="BLOG_IMG_PATH" />
    </association>
</resultMap>

<resultMap type="LikeDto" id="LikeMap">
    <id     property="likeNo"     column="LIKE_NO"/>
    <result property="blogListNo"      column="BLOG_LIST_NO"/>
    <result property="userNo"      column="USER_NO"/>
</resultMap>

  <insert id="insertBlogDetail"
          parameterType="BlogDetailDto">
    INSERT INTO BLOG_DETAIL_T (
        BLOG_LIST_NO
      , USER_NO
      , KEYWORD_NO
      , KEYWORD_NAME
      , TITLE
      , CONTENTS
      , CREATE_DT
      , MODIFY_DT
      , HAS_THUMBNAIL
    ) VALUES (
        BLOG_LIST_SEQ.NEXTVAL
      , #{user.userNo}
      , #{keywordNo}
      , #{keywordName}
      , #{title}
      , #{contents}
      , CURRENT_TIMESTAMP
      , CURRENT_TIMESTAMP
      , #{hasThumbnail}
    )
  
  </insert>
  
    <insert id="insertImages"
          parameterType="ImageDto">
    <selectKey order="BEFORE" keyProperty="blogListNo" resultType="int">
      SELECT MAX(BLOG_LIST_NO)
        FROM BLOG_DETAIL_T
    </selectKey>
    INSERT INTO IMAGE_T (
        IMAGE_NO
      , BLOG_LIST_NO
      , FILESYSTEM_NAME
      , UPLOAD_PATH
    ) VALUES (
        IMAGE_SEQ.NEXTVAL
      , #{blogListNo}
      , #{filesystemName}
      , #{uploadPath}
    )
  
  </insert>
  
  <select id="getKeywordNo"
          resultType="BlogDetailDto">
    SELECT BLOG_LIST_NO, USER_NO, TITLE, CONTENTS, CREATE_DT, MODIFY_DT, KEYWORD_NO, KEYWORD_NAME
      FROM BLOG_DETAIL_T
     WHERE KEYWORD_NO = #{keywordNo}
  </select>
  
  <select id="getKeywordCount"
          resultType="int">
    SELECT COUNT(*)
      FROM BLOG_DETAIL_T
     WHERE KEYWORD_NO = #{keywordNo}
  </select>

  <select id="getKeywordList"
          parameterType="Map"
          resultMap="BlogDetailMap">
    SELECT BLOG_LIST_NO, TITLE, CONTENTS, CREATE_DT, MODIFY_DT, KEYWORD_NO, KEYWORD_NAME, NICKNAME, USER_NO, COMMENT_COUNT, HAS_THUMBNAIL
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY D.BLOG_LIST_NO DESC) AS RN
                 , U.NICKNAME, U.USER_NO, D.BLOG_LIST_NO, D.TITLE, D.CONTENTS, D.CREATE_DT, D.MODIFY_DT, D.KEYWORD_NO, D.KEYWORD_NAME, D.COMMENT_COUNT, D.HAS_THUMBNAIL
              FROM USER_T U INNER JOIN BLOG_DETAIL_T D 
                ON U.USER_NO = D.USER_NO
             WHERE D.KEYWORD_NO = #{keywordNo})
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
    
  <select id="getBlogListCountByWriter"
          resultType="int">
    SELECT COUNT(U.NICKNAME)
      FROM USER_T U INNER JOIN  BLOG_DETAIL_T D 
        ON U.USER_NO = D.USER_NO
     WHERE U.NICKNAME LIKE '%${writer}%'
  </select>
  
  <select id="getBlogListCountByContents"
          resultType="int">
  SELECT COUNT(*)
  FROM BLOG_DETAIL_T
  WHERE DBMS_LOB.INSTR(CONTENTS, #{query}) > 0 OR TITLE LIKE '%${query}%'
  </select>
  
  <select id="getCommentCount"
          resultType="int">
  SELECT COUNT(C.CONTENTS)
    FROM BLOG_DETAIL_T D INNER JOIN COMMENT_T C
      ON D.BLOG_LIST_NO = C.BLOG_LIST_NO
   WHERE D.BLOG_LIST_NO = #{blogDetailListNo}
  </select>
  
  <select id="getBlogDetailListByWriter"
          parameterType="Map"
          resultMap="BlogDetailMap">
  SELECT BLOG_LIST_NO, CREATE_DT, CONTENTS, TITLE, NICKNAME, HAS_THUMBNAIL, USER_NO
    FROM (SELECT ROW_NUMBER() OVER(ORDER BY D.BLOG_LIST_NO DESC) AS RN
               , U.NICKNAME, U.USER_NO, D.TITLE, D.CONTENTS, D.CREATE_DT, D.BLOG_LIST_NO, D.HAS_THUMBNAIL
            FROM USER_T U INNER JOIN  BLOG_DETAIL_T D 
              ON U.USER_NO = D.USER_NO
           WHERE U.NICKNAME LIKE '%${query}%')
   WHERE RN BETWEEN #{begin} AND #{end}    
  </select>
  
  <select id="getBlogDetailListByContents"
          parameterType="Map"
          resultMap="BlogDetailMap">
  SELECT BLOG_LIST_NO, CREATE_DT, CONTENTS, TITLE, NICKNAME, HAS_THUMBNAIL, USER_NO
    FROM (SELECT ROW_NUMBER() OVER(ORDER BY D.BLOG_LIST_NO DESC) AS RN
               , U.NICKNAME, U.USER_NO, D.TITLE, D.CONTENTS, D.CREATE_DT, D.BLOG_LIST_NO, D.HAS_THUMBNAIL
            FROM USER_T U INNER JOIN  BLOG_DETAIL_T D 
              ON U.USER_NO = D.USER_NO
           WHERE DBMS_LOB.INSTR(D.CONTENTS, #{query}) > 0 OR TITLE LIKE '%${query}%')
   WHERE RN BETWEEN #{begin} AND #{end}    
  </select>
  
   <update id="updateBlog" 
          parameterType="BlogDetailDto">
    UPDATE BLOG_DETAIL_T
       SET TITLE = #{title}
         , CONTENTS = #{contents}
         , MODIFY_DT = CURRENT_TIMESTAMP
     WHERE BLOG_LIST_NO = #{blogListNo}
  </update>
  
  <select id="getBlogImageList" 
          resultType="ImageDto">
    SELECT BLOG_LIST_NO, UPLOAD_PATH, FILESYSTEM_NAME
      FROM IMAGE_T
     WHERE BLOG_LIST_NO = #{blogListNo}
  </select>

  <delete id="deleteBlogImage">
    DELETE
      FROM IMAGE_T
     WHERE FILESYSTEM_NAME = #{filesystemName}
  </delete>

  <delete id="deleteBlogImageList">
    DELETE
      FROM IMAGE_T
     WHERE BLOG_LIST_NO = #{blogListNo}
  </delete>

  <delete id="deleteBlog">
    DELETE
      FROM BLOG_DETAIL_T
     WHERE BLOG_LIST_NO = #{blogListNo}
  </delete> 
  
  <select id="getBlogDetailByNo"
          resultMap="BlogDetailMap">
    SELECT B.BLOG_LIST_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT, B.KEYWORD_NAME, B.KEYWORD_NO 
         , U.USER_NO , U.NICKNAME, U.BLOG_IMG_PATH, U.BLOG_CONTENTS
      FROM USER_T U INNER JOIN BLOG_DETAIL_T B
        ON U.USER_NO = B.USER_NO
     WHERE B.BLOG_LIST_NO = #{blogListNo}
  </select>
  
  <select id ="getLike"
          resultMap="LikeMap">
     SELECT LIKE_NO, BLOG_LIST_NO, USER_NO
       FROM LIKE_T
      WHERE BLOG_LIST_NO = #{blogListNo}
   </select>
  
  <insert id="insertLike"
          parameterType="Map">
      INSERT INTO LIKE_T (
         LIKE_NO
       , BLOG_LIST_NO
       , USER_NO
      ) VALUES (
         LIKE_SEQ.NEXTVAL
       , #{blogListNo}
       , #{userNo}
      )
  </insert>
 
  <delete id="deleteLike"
          parameterType="Map">
      DELETE
        FROM LIKE_T
       WHERE BLOG_LIST_NO = #{blogListNo} 
         AND      USER_NO = #{userNo}
  
  </delete>
  
   <select id="getCommentList"
          resultMap="BlogCommentMap">
        SELECT  C.COMMENT_NO, C.CONTENTS, C.CREATE_DT, C.STATE, C.DEPTH, C.GROUP_NO, C.BLOG_LIST_NO
                 , U.USER_NO, U.NICKNAME, U.BLOG_IMG_PATH
              FROM USER_T U INNER JOIN COMMENT_T C
                ON U.USER_NO = C.USER_NO
             WHERE BLOG_LIST_NO =  #{blogListNo} 
             ORDER BY C.GROUP_NO, C.COMMENT_NO ASC
 
  </select>

  
  <insert id="insertComment"
          parameterType="BlogCommentDto">
    INSERT INTO COMMENT_T (
        COMMENT_NO
      , CONTENTS
      , CREATE_DT
      , STATE
      , DEPTH
      , GROUP_NO
      , USER_NO
      , BLOG_LIST_NO
    ) VALUES (
        COMMENT_SEQ.NEXTVAL
      , #{contents}
      , CURRENT_TIMESTAMP
      , 1
      , 0
      , COMMENT_SEQ.CURRVAL
      , #{user.userNo}
      , #{blogListNo}
    )
  </insert>
  
   <insert id="insertReply"
          parameterType="BlogCommentDto">
    INSERT INTO COMMENT_T (
        COMMENT_NO
      , CONTENTS
      , CREATE_DT
      , STATE
      , DEPTH
      , GROUP_NO
      , USER_NO
      , BLOG_LIST_NO
    ) VALUES (
        COMMENT_SEQ.NEXTVAL
      , #{contents}
      , CURRENT_TIMESTAMP
      , 1
      , 1
      , #{groupNo}
      , #{user.userNo}
      , #{blogListNo}
    )
  </insert>
  
    <update id="deleteComment">
    UPDATE COMMENT_T
       SET STATE = 0
     WHERE COMMENT_NO = #{commentNo}
  </update>
  
     <update id="updateCommentCount" 
          parameterType="Map">
    UPDATE BLOG_DETAIL_T
       SET COMMENT_COUNT = #{commentCount}
     WHERE BLOG_LIST_NO = #{blogListNo}
  </update>

</mapper>