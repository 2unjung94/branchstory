<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dosirak.prj.mapper.UserMapper">
 
  <resultMap type="BlogDetailDto" id="BlogDetailMap">
   <id     property="blogListNo"     column="BLOG_LIST_NO"/>
   <result property="keywordNo"      column="KEYWORD_NO"/>
   <result property="title"      column="TITLE"/>
   <result property="contents"   column="CONTENTS"/>
   <result property="createDt"   column="CREATE_DT"/>
   <result property="modifyDt"   column="MODIFY_DT"/>
   <result property="blogCount"   column="BLOG_COUNT"/>
   <result property="commentCount"   column="COMMENT_COUNT"/>   
    <association property="user"  javaType="UserDto">
     <id   property="userNo"  column="USER_NO"/>
   </association>
 </resultMap>
 <!-- BLOG_IMG_PATH 추가햇음 -->
  <select id="getUserByMap" 
          parameterType="Map"
          resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, GENDER, MOBILE, SIGNUP_KIND, PW_MODIFY_DT, SIGNUP_DT, NICKNAME, BLOG_IMG_PATH
    FROM USER_T
    <where>
      <if test="email!=null">EMAIL = #{email}</if>
      <if test="pw!=null">AND PW = #{pw}</if>
    </where>
  </select>

  <select id="getUserByNo"
          resultType="UserDto">
   SELECT USER_NO, EMAIL, NICKNAME, BLOG_CONTENTS, BLOG_IMG_PATH
     FROM USER_T
    WHERE USER_NO = #{userNo}
  </select>

  <select id="getLeaveUserByMap"
          parameterType="Map"
          resultType="LeaveUserDto">
    SELECT LEAVE_USER_NO
      FROM LEAVE_USER_T
    <where>
      <if test="email!=null">EMAIL = #{email}</if>
    </where>
  </select>

  <insert id="insertUser"
          parameterType="UserDto">
    INSERT INTO USER_T (
        USER_NO
      , EMAIL
      , PW
      , NAME
      , GENDER
      , MOBILE
      , SIGNUP_KIND
      , PW_MODIFY_DT
      , SIGNUP_DT
    ) VALUES (
        USER_SEQ.NEXTVAL
      , #{email}
      , #{pw}
      , #{name}
      , #{gender}
      , #{mobile}
      , #{signupKind}
      , CURRENT_DATE
      , CURRENT_DATE
    )
  </insert>

  <delete id="deleteUser">
    DELETE
      FROM USER_T
     WHERE USER_NO = #{userNo}
  </delete>

  <insert id="insertAccessHistory"
          parameterType="Map">
    INSERT INTO ACCESS_HISTORY_T (
        ACCESS_HISTORY_NO
      , EMAIL
      , IP
      , SESSION_ID
      , SIGNIN_DT
    ) VALUES (
        ACCESS_HISTORY_SEQ.NEXTVAL
      , #{email}
      , #{ip}
      , #{sessionId}
      , CURRENT_DATE
    )
  </insert>
  
  <update id="updateAccessHistory">
    UPDATE ACCESS_HISTORY_T
       SET SESSION_ID = #{sessionId}
     WHERE SESSION_ID = #{sessionId} 
  </update>
  

<!--  ********************** 수지 작업 ********************** -->

  <select id="getBlogCount"
          resultType="int">
    SELECT COUNT(*) AS blogCount
      FROM BLOG_DETAIL_T
     WHERE USER_NO = #{userNo} 
  </select>
  
 <select id="getBlogList"
         parameterType="Map"
         resultMap="BlogDetailMap">
  SELECT BLOG_LIST_NO, TITLE, CONTENTS, CREATE_DT, MODIFY_DT, KEYWORD_NAME, KEYWORD_NO, COMMENT_COUNT, HAS_THUMBNAIL, USER_NO
    FROM (SELECT ROW_NUMBER() OVER(ORDER BY BD.BLOG_LIST_NO DESC) AS RN
               , BD.BLOG_LIST_NO, BD.TITLE, BD.CONTENTS, BD.CREATE_DT, BD.MODIFY_DT, BD.KEYWORD_NAME, BD.KEYWORD_NO, BD.COMMENT_COUNT, BD.HAS_THUMBNAIL
               , USR.USER_NO
            FROM USER_T USR INNER JOIN BLOG_DETAIL_T BD 
              ON USR.USER_NO = BD.USER_NO)
   WHERE USER_NO = #{userNo}           
     AND RN BETWEEN #{begin} AND #{end}
 </select>
 
 <select id="getBlogByNo"
         resultMap="BlogDetailMap">
 SELECT BD.BLOG_LIST_NO, BD.USER_NO, BD.TITLE, BD.CONTENTS, BD.CREATE_DT, BD.MODIFY_DT, BD.KEYWORD_NAME, BD.KEYWORD_NO
      , CO.COMMENT_NO
   FROM BLOG_DETAIL_T BD LEFT JOIN COMMENT_T CO 
     ON CO.BLOG_LIST_NO = BD.BLOG_LIST_NO
  WHERE BD.BLOG_LIST_NO = #{blogListNo} 
 </select>
 
 
 <!--   ★ 산들 Profile영역  -->
     <!--   ★★★ 불러오기 -->
  <resultMap type="UserDto" id="profileUserDto">
    <id     property="userNo"             column="USER_NO" />
    <result property="name"               column="NAME"/>
    <result property="email"              column="EMAIL"/>
    <result property="blogContents"       column="BLOG_CONTENTS"/>
    <result property="nickname"           column="NICKNAME"/>
    <result property="blogImgPath"        column="BLOG_IMG_PATH"/>
  </resultMap>

  <select id="loadUserByNo"
          resultMap="profileUserDto">
    SELECT USER_NO, BLOG_CONTENTS, BLOG_IMG_PATH, NICKNAME, NAME, EMAIL
      FROM USER_T
     WHERE USER_NO = #{userNo}
  </select>
  
 <!-- 업데이트 수정!! -->
   <update id="updateProfile"
          parameterType="UserDto">
    UPDATE USER_T
       SET BLOG_CONTENTS = #{blogContents}
         , BLOG_IMG_PATH = #{blogImgPath, jdbcType=VARCHAR}
         , NICKNAME = #{nickname}
     WHERE USER_NO = #{userNo}
  </update>
  
  <select id="getImgPathByUserNo" resultType="String">
    SELECT BLOG_IMG_PATH
    FROM USER_T
    WHERE USER_NO = #{userNo}
  </select>

</mapper>